#pragma once
#include <ArchiveComputation.h>
#include <CLI/CLI.hpp>


class App
{
    public:
        App();
        ~App() = default;

        [[nodiscard]] int GetExitCode()  const;
        int Start(int argc, char **argv) const;

        std::unique_ptr<CLI::App>   Arg_parser;
        std::vector<CompFile::File> DecompressTargets {};
        std::vector<CompFile::File> CompressTargets   {};


        // delete standard functions generated by compiler.
        App(App &)              = delete;
        App(App &&)             = delete;
        App &&operator=(App &&) = delete;
        App &operator=(App &)   = delete;

    private:
        // Properties
        CompFile::ArchiveComputation &Computation = CompFile::ArchiveComputation::getInstance();
        int exit_code       = 0;
        std::string VERSION = "2.4.2";

        // Options
        CLI::Option *OptVersion     = nullptr;
        CLI::Option *OptDecompress  = nullptr;
        CLI::Option *OptCompress    = nullptr;
        CLI::Option *OptRecursive   = nullptr;
        CLI::Option *OptPermissions = nullptr;
};